<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>sprPlayerIdle</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>-100</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>sprPlayerMask</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>newDIr = 0;
    image_speed = 0.3;
defaultSpeed = 3.5;
friction = 0.2;
new_xscale = 1;
new_yscale = 1;
addX = 0;
addY = 0;
inAir = false;
justLand = false;

enableControls = true;


inCollision = false;
removed= true;
prevWind = 0;

hasRose = false;
sndPlayed = false;
dead = false;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="1">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>justLand = false;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>//counts from jumping in the air until landing
inAir = false;
justLand = true;
alarm[1] = 10;

new_xscale = 1;
new_yscale = 1;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if(dead)
{
    enableControls = false;
    hspeed = 0;
    vspeed =0;
    addX = 0;
    addY = 0;
    
    if(!sndPlayed)
    {
        audio_play_sound(sndDeath,0,0);
        sndPlayed = true;
    }
    
}
if(enableControls)
{
if(keyboard_check(vk_left))
{
    hspeed = defaultSpeed*-1 + addX;
}
else if(keyboard_check(vk_right))
{
    hspeed = defaultSpeed + addX;
}
else
    hspeed = 0 + addX;
    
if(keyboard_check(vk_up))
{
    vspeed = defaultSpeed *-1 + addY;
}
else if(keyboard_check(vk_down))
{
    vspeed = defaultSpeed + addY;
}
else
    vspeed = 0 + addY;
    
if(keyboard_check_pressed(vk_space) &amp;&amp; !inAir &amp;&amp; !justLand)
{ 
audio_play_sound(sndJump,0,0);
    inAir = true;
    alarm[0] = 40;
}

if(alarm[0] &gt; 20 &amp;&amp; inAir)
{
    new_xscale+=0.03;
    new_yscale+=0.03;
}
else if(alarm[0] &lt;= 20 &amp;&amp; inAir)
{
    new_xscale-=0.03;
    new_yscale-=0.03;
}

}

if(hspeed!= 0 || vspeed != 0)
{
    if(sprite_index == sprPlayerIdle)
    {
    sprite_index = sprPlayerWalk;
    }
}
else if(sprite_index == sprPlayerWalk)
{
    sprite_index = sprPlayerIdle;
}
    
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>//find in what direction player is walking

if(hspeed &gt; 0 &amp;&amp; vspeed == 0)
{
    newDIr = 0;
}
else if(hspeed &gt; 0 &amp;&amp; vspeed&lt;0)
{   
    newDIr = 45;
}
else if(hspeed == 0 &amp;&amp; vspeed&lt;0)
{   
    newDIr = 90;
}
else if(hspeed &lt; 0 &amp;&amp; vspeed&lt;0)
{   
    newDIr = 135;
}
else if(hspeed &lt; 0 &amp;&amp; vspeed==0)
{   
    newDIr = 180;
}
else if(hspeed &lt; 0 &amp;&amp; vspeed&gt;0)
{   
    newDIr = 225;
}
else if(hspeed == 0 &amp;&amp; vspeed&gt;0)
{   
    newDIr = 270;
}
else if(hspeed &gt; 0 &amp;&amp; vspeed&gt;0)
{   
    newDIr = 315;
}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if(instance_exists(objWind))
{
    var wind = instance_place(x,y,objWind);
    
    if(wind != noone)
    {
        prevWind = wind;
        if(!inCollision)
        {
        addX += prevWind.newAddX;
        addY += prevWind.newAddY;
        }
        inCollision = true;
        removed = false;
    }
    else if(!removed)
    {
        removed = true;
        inCollision = false;
        addX -= prevWind.newAddX;
        addY -= prevWind.newAddY;
    }
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="4" ename="objKiller">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if(!dead)
{
    dead = true;
    enableControls = false;
    var reset = instance_create(0,0,objRoomTransition);
    reset.roomTo = room;
    reset.trSpeed = 0.04;
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="4" ename="objKillerGround">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if(!inAir &amp;&amp; !dead)
{
dead = true;
    enableControls = false;
    var reset = instance_create(0,0,objRoomTransition);
    reset.roomTo = room;
    reset.trSpeed = 0.04;
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="4" ename="objWallBlock">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if(!place_free(x+hspeed,y))
{
    if(hspeed &lt;= 0)
    {
        move_contact_solid(180,abs(hspeed));
    }
    if(hspeed &gt; 0)
    {
        move_contact_solid(0,abs(hspeed));
    }
    
    hspeed = 0;
}

if(!place_free(x,y+vspeed))
{
    if(vspeed &lt;= 0)
    {
        move_contact_solid(90,abs(vspeed));
    }
    
    if(vspeed &gt; 0)
    {
        move_contact_solid(270,abs(vspeed));
    }

    vspeed = 0;
}

if (!place_free(x+hspeed,y+vspeed)) 
{
    hspeed = 0;
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="5" enumb="17">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if((instance_place(mouse_x,mouse_y, objWallBlock) == noone) &amp;&amp;
    (instance_place(mouse_x,mouse_y, objKiller) == noone) &amp;&amp;
    (instance_place(mouse_x,mouse_y, objKillerGround) == noone))
{
x = mouse_x;
y = mouse_y;
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>draw_sprite(sprLight,0,x,y);
if(hasRose) {
draw_sprite_ext(sprRose, 0, x+5, y+5, new_xscale, new_yscale, newDIr, c_white, 1);
}; //draw rose
draw_sprite_ext(sprite_index, image_index, x, y, new_xscale, new_yscale, newDIr, c_white, 1);
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
